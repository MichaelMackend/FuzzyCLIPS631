TRUE
FuzzyCLIPS> (batch "attchtst4.bat")
TRUE
FuzzyCLIPS> (clear) ; Case 1a
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass "Case 1a"
   (a)
   (test (= 1 1))
   =>)
FuzzyCLIPS> 
(defrule fail-fail "Case 1a"
   (b)
   (test (!= 2 2))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (b))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass: f-1
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 1b
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule pass-fail "Case 1b"
   (not (a))
   (test (= 1 1))
   =>)
FuzzyCLIPS> 
(defrule fail-fail "Case 1b"
   (not (b))
   (test (!= 2 2))
   =>)
FuzzyCLIPS> (agenda)
0      pass-fail: *
For a total of 1 activation.
FuzzyCLIPS> (assert (a) (b))
<Fact-2>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (clear) ; Case 1c
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass "Case 1c"
   (exists (a))
   (test (= 1 1))
   =>)
FuzzyCLIPS> 
(defrule fail-fail "Case 1c"
   (exists (b))
   (test (!= 2 2))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (b))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass: *
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 3a
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule pass-fail "Case 3a"
   (not (and (a)
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule pass-pass "Case 3a"
   (not (and (b)
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
0      pass-pass: *
0      pass-fail: *
For a total of 2 activations.
FuzzyCLIPS> (assert (a) (b))
<Fact-2>
FuzzyCLIPS> (agenda)
0      pass-pass: *
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 3b
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass "Case 3b"
   (not (and (not (a))
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule pass-pass "Case 3b"
   (not (and (not (b))
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
0      pass-pass: *
For a total of 1 activation.
FuzzyCLIPS> (assert (a) (b))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass: *
0      pass-pass: *
For a total of 2 activations.
FuzzyCLIPS> (clear) ; Case 3c
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule pass-fail "Case 3c"
   (not (and (exists (a))
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule pass-pass "Case 3c"
   (not (and (exists (b))
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
0      pass-pass: *
0      pass-fail: *
For a total of 2 activations.
FuzzyCLIPS> (assert (a) (b))
<Fact-2>
FuzzyCLIPS> (agenda)
0      pass-pass: *
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 3d
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass "Case 3d"
   (exists (and (a)
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail "Case 3d"
   (exists (and (b)
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (b))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass: *
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 3e
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule pass-fail "Case 3e"
   (exists (and (not (a))
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail "Case 3e"
   (exists (and (not (b))
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
0      pass-fail: *
For a total of 1 activation.
FuzzyCLIPS> (assert (a) (b))
<Fact-2>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (clear) ; Case 3f
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass "Case 3f"
   (exists (and (exists (a))
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail "Case 3f"
   (exists (and (exists (b))
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (b))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass: *
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 4a
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule pass-pass-fail "Case 4a"
   (not (and (a)
             (b)
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule pass-pass-pass "Case 4a"
   (not (and (c)
             (d)
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
0      pass-pass-pass: *
0      pass-pass-fail: *
For a total of 2 activations.
FuzzyCLIPS> (assert (a) (c))
<Fact-2>
FuzzyCLIPS> (agenda)
0      pass-pass-pass: *
0      pass-pass-fail: *
For a total of 2 activations.
FuzzyCLIPS> (assert (b) (d))
<Fact-4>
FuzzyCLIPS> (agenda)
0      pass-pass-pass: *
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 4b
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule pass-fail-pass "Case 4b"
   (not (and (a)
             (not (b))
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule pass-pass-pass "Case 4b"
   (not (and (c)
             (not (d))
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
0      pass-pass-pass: *
0      pass-fail-pass: *
For a total of 2 activations.
FuzzyCLIPS> (assert (a) (c))
<Fact-2>
FuzzyCLIPS> (agenda)
0      pass-pass-pass: *
For a total of 1 activation.
FuzzyCLIPS> (assert (b) (d))
<Fact-4>
FuzzyCLIPS> (agenda)
0      pass-fail-pass: *
0      pass-pass-pass: *
For a total of 2 activations.
FuzzyCLIPS> (clear) ; Case 4c
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule pass-pass-fail "Case 4c"
   (not (and (a)
             (exists (b))
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule pass-pass-pass "Case 4c"
   (not (and (c)
             (exists (d))
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
0      pass-pass-pass: *
0      pass-pass-fail: *
For a total of 2 activations.
FuzzyCLIPS> (assert (a) (c))
<Fact-2>
FuzzyCLIPS> (agenda)
0      pass-pass-pass: *
0      pass-pass-fail: *
For a total of 2 activations.
FuzzyCLIPS> (assert (b) (d))
<Fact-4>
FuzzyCLIPS> (agenda)
0      pass-pass-pass: *
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 4d
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-pass "Case 4d"
   (exists (and (a)
                (b)
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail "Case 4d"
   (exists (and (c)
                (d)
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (c))
<Fact-2>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (b) (d))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-fail-pass: *
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 4e
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-fail "Case 4e"
   (exists (and (a)
                (not (b))
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail "Case 4e"
   (exists (and (c)
                (not (d))
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (c))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass-fail: *
For a total of 1 activation.
FuzzyCLIPS> (assert (b) (d))
<Fact-4>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (clear) ; Case 4f
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-pass "Case 4f"
   (exists (and (a)
                (exists (b))
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail "Case 4f"
   (exists (and (c)
                (exists (d))
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (c))
<Fact-2>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (b) (d))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-fail-pass: *
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 4g
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule pass-fail-fail-pass "Case 4g"
   (not (and (not (and (x)
                       (y)))
             (a)
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule pass-pass-pass-pass "Case 4g"
   (not (and (not (and (z)
                       (w)))
             (b)
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
0      pass-pass-pass-pass: *
0      pass-fail-fail-pass: *
For a total of 2 activations.
FuzzyCLIPS> (assert (a) (b))
<Fact-2>
FuzzyCLIPS> (agenda)
0      pass-pass-pass-pass: *
For a total of 1 activation.
FuzzyCLIPS> (assert (x) (z))
<Fact-4>
FuzzyCLIPS> (agenda)
0      pass-pass-pass-pass: *
For a total of 1 activation.
FuzzyCLIPS> (assert (y) (w))
<Fact-6>
FuzzyCLIPS> (agenda)
0      pass-fail-fail-pass: *
0      pass-pass-pass-pass: *
For a total of 2 activations.
FuzzyCLIPS> (clear) ; Case 4h
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-pass-pass "Case 4h"
   (not (and (not (and (x)
                       (y)))
             (not (a))
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule pass-pass-pass-pass "Case 4h"
   (not (and (not (and (z)
                       (w)))
             (not (b))
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
0      pass-pass-pass-pass: *
For a total of 1 activation.
FuzzyCLIPS> (assert (a) (b))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: *
0      pass-pass-pass-pass: *
For a total of 2 activations.
FuzzyCLIPS> (assert (x) (z))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: *
0      pass-pass-pass-pass: *
For a total of 2 activations.
FuzzyCLIPS> (assert (y) (w))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: *
0      pass-pass-pass-pass: *
For a total of 2 activations.
FuzzyCLIPS> (clear) ; Case 4i
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule pass-fail-fail-pass "Case 4i"
   (not (and (not (and (x)
                       (y)))
             (exists (a))
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule pass-pass-pass-pass "Case 4i"
   (not (and (not (and (z)
                       (w)))
             (exists (b))
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
0      pass-pass-pass-pass: *
0      pass-fail-fail-pass: *
For a total of 2 activations.
FuzzyCLIPS> (assert (a) (b))
<Fact-2>
FuzzyCLIPS> (agenda)
0      pass-pass-pass-pass: *
For a total of 1 activation.
FuzzyCLIPS> (assert (x) (z))
<Fact-4>
FuzzyCLIPS> (agenda)
0      pass-pass-pass-pass: *
For a total of 1 activation.
FuzzyCLIPS> (assert (y) (w))
<Fact-6>
FuzzyCLIPS> (agenda)
0      pass-fail-fail-pass: *
0      pass-pass-pass-pass: *
For a total of 2 activations.
FuzzyCLIPS> (clear) ; Case 4j
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-pass-fail "Case 4j"
   (exists (and (not (and (x)
                          (y)))
                (a)
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-fail "Case 4j"
   (exists (and (not (and (z)
                          (w)))
                (b)
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (b))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-fail: *
For a total of 1 activation.
FuzzyCLIPS> (assert (x) (z))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-fail: *
For a total of 1 activation.
FuzzyCLIPS> (assert (y) (w))
<Fact-6>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (clear) ; Case 4k
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule pass-fail-fail-fail "Case 4k"
   (exists (and (not (and (x)
                          (y)))
                (not (a))
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-fail "Case 4k"
   (exists (and (not (and (z)
                          (w)))
                (not (b))
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
0      pass-fail-fail-fail: *
For a total of 1 activation.
FuzzyCLIPS> (assert (a) (b))
<Fact-2>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (x) (z))
<Fact-4>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (y) (w))
<Fact-6>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (clear) ; Case 4l
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-pass-fail "Case 4l"
   (exists (and (not (and (x)
                          (y)))
                (exists (a))
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-fail "Case 4l"
   (exists (and (not (and (z)
                          (w)))
                (exists (b))
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (b))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-fail: *
For a total of 1 activation.
FuzzyCLIPS> (assert (x) (z))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-fail: *
For a total of 1 activation.
FuzzyCLIPS> (assert (y) (w))
<Fact-6>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (clear) ; Case 5a
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-fail "Case 5a"
   (a)
   (not (and (b)
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass "Case 5a"
   (c)
   (not (and (d)
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (c))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass-pass: f-2,*
0      fail-pass-fail: f-1,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b) (d))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass: f-2,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 5b
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-pass "Case 5b"
   (a)
   (not (and (not (b))
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass "Case 5b"
   (c)
   (not (and (not (d))
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (c))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass-pass: f-2,*
For a total of 1 activation.
FuzzyCLIPS> (assert (b) (d))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-fail-pass: f-1,*
0      fail-pass-pass: f-2,*
For a total of 2 activations.
FuzzyCLIPS> (clear) ; Case 5c
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-fail "Case 5c"
   (a)
   (not (and (exists (b))
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass "Case 5c"
   (c)
   (not (and (exists (d))
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (c))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass-pass: f-2,*
0      fail-pass-fail: f-1,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b) (d))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass: f-2,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 5d
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-pass "Case 5d"
   (a)
   (exists (and (b)
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail "Case 5d"
   (c)
   (exists (and (d)
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (c))
<Fact-2>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (b) (d))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-fail-pass: f-1,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 5e
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-fail "Case 5e"
   (a)
   (exists (and (not (b))
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail "Case 5e"
   (c)
   (exists (and (not (d))
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (c))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass-fail: f-1,*
For a total of 1 activation.
FuzzyCLIPS> (assert (b) (d))
<Fact-4>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (clear) ; Case 5f
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-pass "Case 5f"
   (a)
   (exists (and (exists (b))
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail "Case 5f"
   (c)
   (exists (and (exists (d))
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (c))
<Fact-2>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (b) (d))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-fail-pass: f-1,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 5g
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-both "Case 5g"
   (a (sa ?x))
   (not (and (b (sb ?x))
             (test (> ?x 0))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass "Case 5g"
   (c (sc ?x))
   (not (and (d (sd ?x))
             (test (< ?x 0))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (c (sc 1)) (a (sa 2)) (c (sc 2)))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass: f-4,*
0      fail-pass-both: f-3,*
0      fail-pass-pass: f-2,*
0      fail-pass-both: f-1,*
For a total of 4 activations.
FuzzyCLIPS> (assert (b (sb 1)) (d (sd 1)))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-pass-pass: f-4,*
0      fail-pass-both: f-3,*
0      fail-pass-pass: f-2,*
For a total of 3 activations.
FuzzyCLIPS> (clear) ; Case 5h
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-both "Case 5h"
   (a (sa ?x))
   (not (and (not (b (sb ?x)))
             (test (> ?x 0))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass "Case 5h"
   (c (sc ?x))
   (not (and (not (d (sd ?x)))
             (test (< ?x 0))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (c (sc 1)) (a (sa 2)) (c (sc 2)))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass: f-4,*
0      fail-pass-pass: f-2,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b (sb 1)) (d (sd 1)))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-fail-both: f-1,*
0      fail-pass-pass: f-4,*
0      fail-pass-pass: f-2,*
For a total of 3 activations.
FuzzyCLIPS> (clear) ; Case 5i
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-both "Case 5i"
   (a (sa ?x))
   (not (and (exists (b (sb ?x)))
             (test (> ?x 0))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass "Case 5i"
   (c (sc ?x))
   (not (and (exists (d (sd ?x)))
             (test (< ?x 0))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (c (sc 1)) (a (sa 2)) (c (sc 2)))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass: f-4,*
0      fail-pass-both: f-3,*
0      fail-pass-pass: f-2,*
0      fail-pass-both: f-1,*
For a total of 4 activations.
FuzzyCLIPS> (assert (b (sb 1)) (d (sd 1)))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-pass-pass: f-4,*
0      fail-pass-both: f-3,*
0      fail-pass-pass: f-2,*
For a total of 3 activations.
FuzzyCLIPS> (clear) ; Case 5j
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-both "Case 5j"
   (a (sa ?x))
   (exists (and (b (sb ?x))
                (test (> ?x 0))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail "Case 5j"
   (c (sc ?x))
   (exists (and (d (sd ?x))
                (test (< ?x 0))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (c (sc 1)) (a (sa 2)) (c (sc 2)))
<Fact-4>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (b (sb 1)) (d (sd 1)))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-fail-both: f-1,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 5k
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-both "Case 5k"
   (a (sa ?x))
   (exists (and (not (b (sb ?x)))
                (test (> ?x 0))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail "Case 5k"
   (c (sc ?x))
   (exists (and (not (d (sd ?x)))
                (test (< ?x 0))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (c (sc 1)) (a (sa 2)) (c (sc 2)))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-both: f-3,*
0      fail-pass-both: f-1,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b (sb 1)) (d (sd 1)))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-pass-both: f-3,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 5l
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-both "Case 5l"
   (a (sa ?x))
   (exists (and (exists (b (sb ?x)))
                (test (> ?x 0))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail "Case 5l"
   (c (sc ?x))
   (exists (and (exists (d (sd ?x)))
                (test (< ?x 0))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (c (sc 1)) (a (sa 2)) (c (sc 2)))
<Fact-4>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (b (sb 1)) (d (sd 1)))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-fail-both: f-1,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 5m
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-pass-pass "Case 5m"
   (not (and (not (and (a)
                       (b)))
             (not (and (c)
                       (test (= 1 1))))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-pass "Case 5m"
   (not (and (not (and (d)
                       (e)))
             (not (and (f)
                       (test (!= 2 2))))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (c) (f))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: *
For a total of 1 activation.
FuzzyCLIPS> (assert (a) (d))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: *
For a total of 1 activation.
FuzzyCLIPS> (assert (b) (e))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-fail-fail-pass: *
0      fail-pass-pass-pass: *
For a total of 2 activations.
FuzzyCLIPS> (clear) ; Case 5n
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule pass-fail-fail-pass "Case 5n"
   (not (and (not (and (a)
                       (b)))
             (exists (and (c)
                          (test (= 1 1))))))
   =>)
FuzzyCLIPS> 
(defrule pass-pass-pass-pass "Case 5n"
   (not (and (not (and (d)
                       (e)))
             (exists (and (f)
                          (test (!= 2 2))))))
   =>)
FuzzyCLIPS> (agenda)
0      pass-pass-pass-pass: *
0      pass-fail-fail-pass: *
For a total of 2 activations.
FuzzyCLIPS> (assert (c) (f))
<Fact-2>
FuzzyCLIPS> (agenda)
0      pass-pass-pass-pass: *
For a total of 1 activation.
FuzzyCLIPS> (assert (a) (d))
<Fact-4>
FuzzyCLIPS> (agenda)
0      pass-pass-pass-pass: *
For a total of 1 activation.
FuzzyCLIPS> (assert (b) (e))
<Fact-6>
FuzzyCLIPS> (agenda)
0      pass-fail-fail-pass: *
0      pass-pass-pass-pass: *
For a total of 2 activations.
FuzzyCLIPS> (clear) ; Case 5o
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-both "Case 5o"
   (x)
   (a (sa ?x))
   (not (and (b (sb ?x))
             (test (> ?x 0))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass "Case 5o"
   (x)
   (c (sc ?x))
   (not (and (d (sd ?x))
             (test (< ?x 0))))
   =>)
FuzzyCLIPS> (assert (x))
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (c (sc 1)) (a (sa 2)) (c (sc 2)))
<Fact-5>
FuzzyCLIPS> (agenda)
0      fail-pass-pass: f-1,f-5,*
0      fail-pass-both: f-1,f-4,*
0      fail-pass-pass: f-1,f-3,*
0      fail-pass-both: f-1,f-2,*
For a total of 4 activations.
FuzzyCLIPS> (assert (b (sb 1)) (d (sd 1)))
<Fact-7>
FuzzyCLIPS> (agenda)
0      fail-pass-pass: f-1,f-5,*
0      fail-pass-both: f-1,f-4,*
0      fail-pass-pass: f-1,f-3,*
For a total of 3 activations.
FuzzyCLIPS> (clear) ; Case 5p
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-both "Case 5p"
   (x)
   (a (sa ?x))
   (not (and (not (b (sb ?x)))
             (test (> ?x 0))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass "Case 5p"
   (x)
   (c (sc ?x))
   (not (and (not (d (sd ?x)))
             (test (< ?x 0))))
   =>)
FuzzyCLIPS> (assert (x))
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (c (sc 1)) (a (sa 2)) (c (sc 2)))
<Fact-5>
FuzzyCLIPS> (agenda)
0      fail-pass-pass: f-1,f-5,*
0      fail-pass-pass: f-1,f-3,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b (sb 1)) (d (sd 1)))
<Fact-7>
FuzzyCLIPS> (agenda)
0      fail-fail-both: f-1,f-2,*
0      fail-pass-pass: f-1,f-5,*
0      fail-pass-pass: f-1,f-3,*
For a total of 3 activations.
FuzzyCLIPS> (clear) ; Case 5q
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-both "Case 5q"
   (x)
   (a (sa ?x))
   (not (and (exists (b (sb ?x)))
             (test (> ?x 0))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass "Case 5q"
   (x)
   (c (sc ?x))
   (not (and (exists (d (sd ?x)))
             (test (< ?x 0))))
   =>)
FuzzyCLIPS> (assert (x))
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (c (sc 1)) (a (sa 2)) (c (sc 2)))
<Fact-5>
FuzzyCLIPS> (agenda)
0      fail-pass-pass: f-1,f-5,*
0      fail-pass-both: f-1,f-4,*
0      fail-pass-pass: f-1,f-3,*
0      fail-pass-both: f-1,f-2,*
For a total of 4 activations.
FuzzyCLIPS> (assert (b (sb 1)) (d (sd 1)))
<Fact-7>
FuzzyCLIPS> (agenda)
0      fail-pass-pass: f-1,f-5,*
0      fail-pass-both: f-1,f-4,*
0      fail-pass-pass: f-1,f-3,*
For a total of 3 activations.
FuzzyCLIPS> (clear) ; Case 5r
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-both "Case 5r"
   (x)
   (a (sa ?x))
   (exists (and (b (sb ?x))
                (test (> ?x 0))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail "Case 5r"
   (x)
   (c (sc ?x))
   (exists (and (d (sd ?x))
                (test (< ?x 0))))
   =>)
FuzzyCLIPS> (assert (x))
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (c (sc 1)) (a (sa 2)) (c (sc 2)))
<Fact-5>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (b (sb 1)) (d (sd 1)))
<Fact-7>
FuzzyCLIPS> (agenda)
0      fail-fail-both: f-1,f-2,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 5s
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-both "Case 5s"
   (x)
   (a (sa ?x))
   (exists (and (not (b (sb ?x)))
                (test (> ?x 0))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail "Case 5s"
   (x)
   (c (sc ?x))
   (exists (and (not (d (sd ?x)))
                (test (< ?x 0))))
   =>)
FuzzyCLIPS> (assert (x))
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (c (sc 1)) (a (sa 2)) (c (sc 2)))
<Fact-5>
FuzzyCLIPS> (agenda)
0      fail-pass-both: f-1,f-4,*
0      fail-pass-both: f-1,f-2,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b (sb 1)) (d (sd 1)))
<Fact-7>
FuzzyCLIPS> (agenda)
0      fail-pass-both: f-1,f-4,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 5t
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-both "Case 5t"
   (x)
   (a (sa ?x))
   (exists (and (exists (b (sb ?x)))
                (test (> ?x 0))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail "Case 5t"
   (x)
   (c (sc ?x))
   (exists (and (exists (d (sd ?x)))
                (test (< ?x 0))))
   =>)
FuzzyCLIPS> (assert (x))
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (c (sc 1)) (a (sa 2)) (c (sc 2)))
<Fact-5>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (b (sb 1)) (d (sd 1)))
<Fact-7>
FuzzyCLIPS> (agenda)
0      fail-fail-both: f-1,f-2,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 6a
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-fail-fail-pass "Case 6a"
   (a)
   (not (and (not (and (b)
                       (c)))
             (test (= 1 1))
             (d)))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass-pass-pass "Case 6a"
   (e)
   (not (and (not (and (f)
                       (g)))
             (test (!= 2 2))
             (h)))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (e))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-2,*
0      fail-pass-fail-fail-pass: f-1,*
For a total of 2 activations.
FuzzyCLIPS> (assert (d) (h))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-2,*
For a total of 1 activation.
FuzzyCLIPS> (assert (b) (f))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-2,*
For a total of 1 activation.
FuzzyCLIPS> (assert (c) (g))
<Fact-8>
FuzzyCLIPS> (agenda)
0      fail-pass-fail-fail-pass: f-1,*
0      fail-pass-pass-pass-pass: f-2,*
For a total of 2 activations.
FuzzyCLIPS> (clear) ; Case 6b
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-pass-pass-fail "Case 6b"
   (a)
   (not (and (exists (and (b)
                          (c)))
             (test (= 1 1))
             (d)))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass-pass-pass "Case 6b"
   (e)
   (not (and (exists (and (f)
                          (g)))
             (test (!= 2 2))
             (h)))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (e))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-2,*
0      fail-pass-pass-pass-fail: f-1,*
For a total of 2 activations.
FuzzyCLIPS> (assert (d) (h))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-2,*
0      fail-pass-pass-pass-fail: f-1,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b) (f))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-2,*
0      fail-pass-pass-pass-fail: f-1,*
For a total of 2 activations.
FuzzyCLIPS> (assert (c) (g))
<Fact-8>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-2,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 6c
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-pass-pass-fail "Case 6c"
   (a)
   (exists (and (not (and (b)
                          (c)))
                (test (= 1 1))
                (d)))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-fail-fail "Case 6c"
   (e)
   (exists (and (not (and (f)
                          (g)))
                (test (!= 2 2))
                (h)))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (e))
<Fact-2>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (d) (h))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-fail-pass-pass-fail: f-1,*
For a total of 1 activation.
FuzzyCLIPS> (assert (b) (f))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-fail-pass-pass-fail: f-1,*
For a total of 1 activation.
FuzzyCLIPS> (assert (c) (g))
<Fact-8>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (clear) ; Case 6d
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-fail-fail-pass "Case 6d"
   (a)
   (exists (and (exists (and (b)
                             (c)))
                (test (= 1 1))
                (d)))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-fail-fail "Case 6d"
   (e)
   (exists (and (exists (and (f)
                             (g)))
                (test (!= 2 2))
                (h)))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (e))
<Fact-2>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (d) (h))
<Fact-4>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (b) (f))
<Fact-6>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (c) (g))
<Fact-8>
FuzzyCLIPS> (agenda)
0      fail-fail-fail-fail-pass: f-1,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 6e
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-fail-fail-both "Case 6e"
   (a (sa ?x))
   (not (and (not (and (b (sb ?x))
                       (c (sc ?x))))
             (test (= 1 1))
             (d (sd ?x))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass-pass-pass "Case 6e"
   (e (se ?x))
   (not (and (not (and (f (sf ?x))
                       (g (sg ?x))))
             (test (!= 2 2))
             (h (sh ?x))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-4,*
0      fail-pass-fail-fail-both: f-3,*
0      fail-pass-pass-pass-pass: f-2,*
0      fail-pass-fail-fail-both: f-1,*
For a total of 4 activations.
FuzzyCLIPS> (assert (d (sd 1)) (h (sh 1)) (d (sd 2)) (h (sh 2)))
<Fact-8>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-4,*
0      fail-pass-pass-pass-pass: f-2,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-10>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-4,*
0      fail-pass-pass-pass-pass: f-2,*
For a total of 2 activations.
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-12>
FuzzyCLIPS> (agenda)
0      fail-pass-fail-fail-both: f-1,*
0      fail-pass-pass-pass-pass: f-4,*
0      fail-pass-pass-pass-pass: f-2,*
For a total of 3 activations.
FuzzyCLIPS> (clear) ; Case 6f
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-pass-pass-both "Case 6f"
   (a (sa ?x))
   (not (and (exists (and (b (sb ?x))
                          (c (sc ?x))))
             (test (= 1 1))
             (d (sd ?x))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass-pass-pass "Case 6f"
   (e (se ?x))
   (not (and (exists (and (f (sf ?x))
                          (g (sg ?x))))
             (test (!= 2 2))
             (h (sh ?x))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-4,*
0      fail-pass-pass-pass-both: f-3,*
0      fail-pass-pass-pass-pass: f-2,*
0      fail-pass-pass-pass-both: f-1,*
For a total of 4 activations.
FuzzyCLIPS> (assert (d (sd 1)) (h (sh 1)) (d (sd 2)) (h (sh 2)))
<Fact-8>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-4,*
0      fail-pass-pass-pass-both: f-3,*
0      fail-pass-pass-pass-pass: f-2,*
0      fail-pass-pass-pass-both: f-1,*
For a total of 4 activations.
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-10>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-4,*
0      fail-pass-pass-pass-both: f-3,*
0      fail-pass-pass-pass-pass: f-2,*
0      fail-pass-pass-pass-both: f-1,*
For a total of 4 activations.
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-12>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-4,*
0      fail-pass-pass-pass-both: f-3,*
0      fail-pass-pass-pass-pass: f-2,*
For a total of 3 activations.
FuzzyCLIPS> (clear) ; Case 6g
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-pass-pass-both "Case 6g"
   (a (sa ?x))
   (exists (and (not (and (b (sb ?x))
                          (c (sc ?x))))
                (test (= 1 1))
                (d (sd ?x))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-fail-fail "Case 6g"
   (e (se ?x))
   (exists (and (not (and (f (sf ?x))
                          (g (sg ?x))))
                (test (!= 2 2))
                (h (sh ?x))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-4>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (d (sd 1)) (h (sh 1)) (d (sd 2)) (h (sh 2)))
<Fact-8>
FuzzyCLIPS> (agenda)
0      fail-fail-pass-pass-both: f-3,*
0      fail-fail-pass-pass-both: f-1,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-10>
FuzzyCLIPS> (agenda)
0      fail-fail-pass-pass-both: f-3,*
0      fail-fail-pass-pass-both: f-1,*
For a total of 2 activations.
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-12>
FuzzyCLIPS> (agenda)
0      fail-fail-pass-pass-both: f-3,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 6h
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-fail-fail-both "Case 6h"
   (a (sa ?x))
   (exists (and (exists (and (b (sb ?x))
                             (c (sc ?x))))
                (test (= 1 1))
                (d (sd ?x))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-fail-fail "Case 6h"
   (e (se ?x))
   (exists (and (exists (and (f (sf ?x))
                             (g (sg ?x))))
                (test (!= 2 2))
                (h (sh ?x))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-4>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (d (sd 1)) (h (sh 1)) (d (sd 2)) (h (sh 2)))
<Fact-8>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-10>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-12>
FuzzyCLIPS> (agenda)
0      fail-fail-fail-fail-both: f-1,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 6i
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-fail-fail-both "Case 6i"
   (x)
   (a (sa ?x))
   (not (and (not (and (b (sb ?x))
                       (c (sc ?x))))
             (test (= 1 1))
             (d (sd ?x))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass-pass-pass "Case 6i"
   (x)
   (e (se ?x))
   (not (and (not (and (f (sf ?x))
                       (g (sg ?x))))
             (test (!= 2 2))
             (h (sh ?x))))
   =>)
FuzzyCLIPS> (assert (x))
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-5>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-1,f-5,*
0      fail-pass-fail-fail-both: f-1,f-4,*
0      fail-pass-pass-pass-pass: f-1,f-3,*
0      fail-pass-fail-fail-both: f-1,f-2,*
For a total of 4 activations.
FuzzyCLIPS> (assert (d (sd 1)) (h (sh 1)) (d (sd 2)) (h (sh 2)))
<Fact-9>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-1,f-5,*
0      fail-pass-pass-pass-pass: f-1,f-3,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-11>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-1,f-5,*
0      fail-pass-pass-pass-pass: f-1,f-3,*
For a total of 2 activations.
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-13>
FuzzyCLIPS> (agenda)
0      fail-pass-fail-fail-both: f-1,f-2,*
0      fail-pass-pass-pass-pass: f-1,f-5,*
0      fail-pass-pass-pass-pass: f-1,f-3,*
For a total of 3 activations.
FuzzyCLIPS> (clear) ; Case 6j
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-pass-pass-both "Case 6j"
   (x)
   (a (sa ?x))
   (not (and (exists (and (b (sb ?x))
                          (c (sc ?x))))
             (test (= 1 1))
             (d (sd ?x))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass-pass-pass "Case 6j"
   (x)
   (e (se ?x))
   (not (and (exists (and (f (sf ?x))
                          (g (sg ?x))))
             (test (!= 2 2))
             (h (sh ?x))))
   =>)
FuzzyCLIPS> (assert (x))
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-5>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-1,f-5,*
0      fail-pass-pass-pass-both: f-1,f-4,*
0      fail-pass-pass-pass-pass: f-1,f-3,*
0      fail-pass-pass-pass-both: f-1,f-2,*
For a total of 4 activations.
FuzzyCLIPS> (assert (d (sd 1)) (h (sh 1)) (d (sd 2)) (h (sh 2)))
<Fact-9>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-1,f-5,*
0      fail-pass-pass-pass-both: f-1,f-4,*
0      fail-pass-pass-pass-pass: f-1,f-3,*
0      fail-pass-pass-pass-both: f-1,f-2,*
For a total of 4 activations.
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-11>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-1,f-5,*
0      fail-pass-pass-pass-both: f-1,f-4,*
0      fail-pass-pass-pass-pass: f-1,f-3,*
0      fail-pass-pass-pass-both: f-1,f-2,*
For a total of 4 activations.
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-13>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass-pass: f-1,f-5,*
0      fail-pass-pass-pass-both: f-1,f-4,*
0      fail-pass-pass-pass-pass: f-1,f-3,*
For a total of 3 activations.
FuzzyCLIPS> (clear) ; Case 6k
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-pass-pass-both "Case 6k"
   (x)
   (a (sa ?x))
   (exists (and (not (and (b (sb ?x))
                          (c (sc ?x))))
                (test (= 1 1))
                (d (sd ?x))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-fail-fail "Case 6k"
   (x)
   (e (se ?x))
   (exists (and (not (and (f (sf ?x))
                          (g (sg ?x))))
                (test (!= 2 2))
                (h (sh ?x))))
   =>)
FuzzyCLIPS> (assert (x))
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-5>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (d (sd 1)) (h (sh 1)) (d (sd 2)) (h (sh 2)))
<Fact-9>
FuzzyCLIPS> (agenda)
0      fail-fail-pass-pass-both: f-1,f-4,*
0      fail-fail-pass-pass-both: f-1,f-2,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-11>
FuzzyCLIPS> (agenda)
0      fail-fail-pass-pass-both: f-1,f-4,*
0      fail-fail-pass-pass-both: f-1,f-2,*
For a total of 2 activations.
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-13>
FuzzyCLIPS> (agenda)
0      fail-fail-pass-pass-both: f-1,f-4,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 6l
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-fail-fail-both "Case 6l"
   (x)
   (a (sa ?x))
   (exists (and (exists (and (b (sb ?x))
                             (c (sc ?x))))
                (test (= 1 1))
                (d (sd ?x))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-fail-fail "Case 6l"
   (x)
   (e (se ?x))
   (exists (and (exists (and (f (sf ?x))
                             (g (sg ?x))))
                (test (!= 2 2))
                (h (sh ?x))))
   =>)
FuzzyCLIPS> (assert (x))
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-5>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (d (sd 1)) (h (sh 1)) (d (sd 2)) (h (sh 2)))
<Fact-9>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-11>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-13>
FuzzyCLIPS> (agenda)
0      fail-fail-fail-fail-both: f-1,f-2,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 7a
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-fail-pass "Case 7a"
   (a)
   (not (and (not (and (b)
                       (c)))
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass-pass "Case 7a"
   (e)
   (not (and (not (and (f)
                       (g)))
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (e))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: f-2,*
For a total of 1 activation.
FuzzyCLIPS> (assert (b) (f))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: f-2,*
For a total of 1 activation.
FuzzyCLIPS> (assert (c) (g))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-fail-fail-pass: f-1,*
0      fail-pass-pass-pass: f-2,*
For a total of 2 activations.
FuzzyCLIPS> (clear) ; Case 7b
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-pass-fail "Case 7b"
   (a)
   (not (and (exists (and (b)
                          (c)))
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass-pass "Case 7b"
   (e)
   (not (and (exists (and (f)
                          (g)))
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (e))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: f-2,*
0      fail-pass-pass-fail: f-1,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b) (f))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: f-2,*
0      fail-pass-pass-fail: f-1,*
For a total of 2 activations.
FuzzyCLIPS> (assert (c) (g))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: f-2,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 7c
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-pass-fail "Case 7c"
   (a)
   (exists (and (not (and (b)
                          (c)))
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-fail "Case 7c"
   (e)
   (exists (and (not (and (f)
                          (g)))
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (e))
<Fact-2>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-fail: f-1,*
For a total of 1 activation.
FuzzyCLIPS> (assert (b) (f))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-fail: f-1,*
For a total of 1 activation.
FuzzyCLIPS> (assert (c) (g))
<Fact-6>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (clear) ; Case 7d
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-fail-pass "Case 7d"
   (a)
   (exists (and (exists (and (b)
                             (c)))
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-fail "Case 7d"
   (e)
   (exists (and (exists (and (f)
                             (g)))
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a) (e))
<Fact-2>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (b) (f))
<Fact-4>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (c) (g))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-fail-fail-pass: f-1,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 7e
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-fail-both "Case 7e"
   (a (sa ?x))
   (not (and (not (and (b (sb ?x))
                       (c (sc ?x))))
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass-pass "Case 7e"
   (e (se ?x))
   (not (and (not (and (f (sf ?x))
                       (g (sg ?x))))
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: f-4,*
0      fail-pass-pass-pass: f-2,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: f-4,*
0      fail-pass-pass-pass: f-2,*
For a total of 2 activations.
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-8>
FuzzyCLIPS> (agenda)
0      fail-fail-fail-both: f-1,*
0      fail-pass-pass-pass: f-4,*
0      fail-pass-pass-pass: f-2,*
For a total of 3 activations.
FuzzyCLIPS> (clear) ; Case 7f
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-pass-both "Case 7f"
   (a (sa ?x))
   (not (and (exists (and (b (sb ?x))
                          (c (sc ?x))))
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass-pass "Case 7f"
   (e (se ?x))
   (not (and (exists (and (f (sf ?x))
                          (g (sg ?x))))
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: f-4,*
0      fail-pass-pass-both: f-3,*
0      fail-pass-pass-pass: f-2,*
0      fail-pass-pass-both: f-1,*
For a total of 4 activations.
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: f-4,*
0      fail-pass-pass-both: f-3,*
0      fail-pass-pass-pass: f-2,*
0      fail-pass-pass-both: f-1,*
For a total of 4 activations.
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-8>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: f-4,*
0      fail-pass-pass-both: f-3,*
0      fail-pass-pass-pass: f-2,*
For a total of 3 activations.
FuzzyCLIPS> (clear) ; Case 7g
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-pass-both "Case 7g"
   (a (sa ?x))
   (exists (and (not (and (b (sb ?x))
                          (c (sc ?x))))
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-fail "Case 7g"
   (e (se ?x))
   (exists (and (not (and (f (sf ?x))
                          (g (sg ?x))))
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-4>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-both: f-3,*
0      fail-pass-pass-both: f-1,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-6>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-both: f-3,*
0      fail-pass-pass-both: f-1,*
For a total of 2 activations.
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-8>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-both: f-3,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 7h
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-fail-both "Case 7h"
   (a (sa ?x))
   (exists (and (exists (and (b (sb ?x))
                             (c (sc ?x))))
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-fail "Case 7h"
   (e (se ?x))
   (exists (and (exists (and (f (sf ?x))
                             (g (sg ?x))))
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-4>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-6>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-8>
FuzzyCLIPS> (agenda)
0      fail-fail-fail-both: f-1,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 7i
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-fail-both "Case 7i"
   (x)
   (a (sa ?x))
   (not (and (not (and (b (sb ?x))
                       (c (sc ?x))))
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass-pass "Case 7i"
   (x)
   (e (se ?x))
   (not (and (not (and (f (sf ?x))
                       (g (sg ?x))))
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (assert (x))
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-5>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: f-1,f-5,*
0      fail-pass-pass-pass: f-1,f-3,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-7>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: f-1,f-5,*
0      fail-pass-pass-pass: f-1,f-3,*
For a total of 2 activations.
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-9>
FuzzyCLIPS> (agenda)
0      fail-fail-fail-both: f-1,f-2,*
0      fail-pass-pass-pass: f-1,f-5,*
0      fail-pass-pass-pass: f-1,f-3,*
For a total of 3 activations.
FuzzyCLIPS> (clear) ; Case 7j
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-pass-both "Case 7j"
   (x)
   (a (sa ?x))
   (not (and (exists (and (b (sb ?x))
                          (c (sc ?x))))
             (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-pass-pass-pass "Case 7j"
   (x)
   (e (se ?x))
   (not (and (exists (and (f (sf ?x))
                          (g (sg ?x))))
             (test (!= 2 2))))
   =>)
FuzzyCLIPS> (assert (x))
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-5>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: f-1,f-5,*
0      fail-pass-pass-both: f-1,f-4,*
0      fail-pass-pass-pass: f-1,f-3,*
0      fail-pass-pass-both: f-1,f-2,*
For a total of 4 activations.
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-7>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: f-1,f-5,*
0      fail-pass-pass-both: f-1,f-4,*
0      fail-pass-pass-pass: f-1,f-3,*
0      fail-pass-pass-both: f-1,f-2,*
For a total of 4 activations.
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-9>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-pass: f-1,f-5,*
0      fail-pass-pass-both: f-1,f-4,*
0      fail-pass-pass-pass: f-1,f-3,*
For a total of 3 activations.
FuzzyCLIPS> (clear) ; Case 7k
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-pass-pass-both "Case 7k"
   (x)
   (a (sa ?x))
   (exists (and (not (and (b (sb ?x))
                          (c (sc ?x))))
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-fail "Case 7k"
   (x)
   (e (se ?x))
   (exists (and (not (and (f (sf ?x))
                          (g (sg ?x))))
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (assert (x))
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-5>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-both: f-1,f-4,*
0      fail-pass-pass-both: f-1,f-2,*
For a total of 2 activations.
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-7>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-both: f-1,f-4,*
0      fail-pass-pass-both: f-1,f-2,*
For a total of 2 activations.
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-9>
FuzzyCLIPS> (agenda)
0      fail-pass-pass-both: f-1,f-4,*
For a total of 1 activation.
FuzzyCLIPS> (clear) ; Case 7l
FuzzyCLIPS> (load* "attchtst4.clp")
TRUE
FuzzyCLIPS> 
(defrule fail-fail-fail-both "Case 7l"
   (x)
   (a (sa ?x))
   (exists (and (exists (and (b (sb ?x))
                             (c (sc ?x))))
                (test (= 1 1))))
   =>)
FuzzyCLIPS> 
(defrule fail-fail-fail-fail "Case 7l"
   (x)
   (e (se ?x))
   (exists (and (exists (and (f (sf ?x))
                             (g (sg ?x))))
                (test (!= 2 2))))
   =>)
FuzzyCLIPS> (assert (x))
<Fact-1>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (a (sa 1)) (e (se 1)) (a (sa 2)) (e (se 2)))
<Fact-5>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (b (sb 1)) (f (sf 1)))
<Fact-7>
FuzzyCLIPS> (agenda)
FuzzyCLIPS> (assert (c (sc 1)) (g (sg 1)))
<Fact-9>
FuzzyCLIPS> (agenda)
0      fail-fail-fail-both: f-1,f-2,*
For a total of 1 activation.
FuzzyCLIPS> (clear)
FuzzyCLIPS> (dribble-off)
